- stochastic trainer: 
	- too slow -> it uses the accumulator inefficiently
	- double check the L2-regularization

- optimization statistics computed at the layer level: average gradient LInf-norm, number of calls
	- to be printed when the layers are destroyed?
	- this is to investigate why it takes many more iterations to optimize networks with more layers
		(diminishing gradient)

- reduce the number of input/output buffers for layers

- new datasets: The German Traffic Sign Detection, INRIA car and person datasets, dymlerchrysler human detection

- more efficient way to store & select samples for large datasets:
	- allocate xGB of RAM to store some samples in memory and load the others from the disk

- thread_loop with states should use std::future to obtain the returned values (e.g. gradient & loss value)
	
- implement other training methods for the convolution network:
	- unsupervised training:
		- new loss (without the output layer): a single output should have a much larger value magnitude than the others 
			(e.g. learn to disintangle the variation modes)
		- than train the output layer with the annotated samples

	- regularization: variational learning (like in ebbbost)
        - regularization: l2, symmetry


