- assymetric loss:
	- e.g. the non-face samples dominate the face samples (use a similar weighting as in the phd thesis)

	- or modify the task to duplicate the less frequent classes

	- or store for each training sample a weight: modify the loss value & error, sample based on this weight

- Lp norm regularization

- finish the training scripts for other datasets (CIFAR-10, CIFAR-100, SVHN, NORB, STL)

- reduce the number of input/output buffers for layers:
	- especially for the pooling layer (although it is very fast)

- faster convolution:
        - check if any improvement if using a 3D convolution    
               
- improve the speed of the linear layers: 
	- the gradient takes too much to compute!
	- the gradient does not scale with the number of threads

- implement this network type:
	- http://arxiv.org/pdf/1312.4400v3.pdf

- unsupervised learning (after 0.1 release): 
	- unsupervised training:
		- new loss (without the output layer): a single output should have a much larger value magnitude than the others 
			(e.g. learn to disintangle the variation modes)
		- than train the output layer with the annotated samples

- reconstruction regularization (after 0.1 release):
	- for linear & convolution layers -> reuse parameters to easily reconstruct the input

- feature visualization & image generation (after 0.1 release)

- random forests (after 0.1 release)

- thread_loop with states should use std::future to obtain the returned values (e.g. gradient & loss value)
	

