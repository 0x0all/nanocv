- cleanup sampling & annotation data structures:
	- move the point & rectangle to types
	- create a 2d size structure (e.g. task sample dimension, model size)

- train/test models:
	- generic model (load/save/size/process)
	- linear model implementation
	- trainer for the linear model

        - multiple runs (per fold) -> avg + stdev error rate
	- take into account that some samples are not labeled!

	- could add options to filter the input: e.g. smoothing, normalization, contrast equalization

- SFML test programs:
	- I - display task images (train/test, flip images), draw annotations and labels
	- II - plot 2D functions

- 2D widgets:
        - try to create a flat set of widget similar to these ones:
        http://timotheegiet.com/blog/illust/krita-sketch-release.html

        Wrap the mainwindow and the events into a xdesktop class.
        All the widgets should be added to this xdesktop class
        
        - nicer task viewer: - thumbnail-based, - caching 256 images, - iterator added to task for off-memory tasks
        - gui: 
                - display the image pyramid: implement bilinear & nearest neighbour scaling for arbitrary matrices, image_t::scale(0.9)
                - display edges & gradients: image_t::edges(), image_t::grads() scaled to [0, 255]
                - display histogram for a particular channel: implement a generic histogram class (count - contiguous & sparse, value binning) with formated text print
                - display histogram for a selected region
                        - should also load datasets and apply filters to them
                - zooming buttons
                - display the current zooming level (in percentage)
                - display the output of various filters

- faster RGB to CIELab transform (goal: 1s single-thread version of the color testing program)

- add other datasets:
	- INRIA car and person datasets
	- NORB, inria pedestrian detection, inria human detection, dymlerchrysler human detection, face detection, PASCALVoc2011, CALTECH101...

- autoencoders: how to generate samples ?!

- may revive/improve the bootstrapping idea:
        - also bootstrap the background of the images containing faces
                => many billions of samples (may require removing some profile faces or some animals 
                        that look very much like frontal faces)

