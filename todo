- redo tasks (iterate, sample):
        + load STL-10 dataset: http://www.stanford.edu/~acoates//stl10/
	- load cmu-faces

- finish tasks:
	- ::fold* functions -> think of a general method to store the samples / fold
	- statistics: #train/#test per fold

test program:
- measure the loading time
- measure the sampling time (rgba to cielab)
- display #rows, cols, inputs, outputs, images, fold statistics

- use openscenegraph:
	- load/save images (replace Qt)
	- display the images from a task

- functions to draw into a RGBA matrix:
	- line, circles, 2D plots
	- may use an opengl context for plotting, have a look at: http://www.glfw.org/

- faster RGB to CIELab transform (goal: 1s single thread version of the color testing program)

- replace Qt with imagemagick or libpng/libtiff

- train/test modes:
	- a model should be a set of linear layers with various activation functions: tanh, 2x/(1+x^2), identity
        - redesign losses and the optimization part
        - multiple runs -> avg + stdev error rate

- 2D widgets:
        - try to create a flat set of widget similar to these ones:
        http://timotheegiet.com/blog/illust/krita-sketch-release.html

        Wrap the mainwindow and the events into a xdesktop class.
        All the widgets should be added to this xdesktop class
        
        - nicer task viewer: - thumbnail-based, - caching 256 images, - iterator added to task for off-memory tasks
        - gui: 
                - display the image pyramid: implement bilinear & nearest neighbour scaling for arbitrary matrices, image_t::scale(0.9)
                - display edges & gradients: image_t::edges(), image_t::grads() scaled to [0, 255]
                - display histogram for a particular channel: implement a generic histogram class (count - contiguous & sparse, value binning) with formated text print
                - display histogram for a selected region
                        - should also load datasets and apply filters to them
                - zooming buttons
                - display the current zooming level (in percentage)
                - display the output of various filters

- add other datasets:
	- add INRIA car and person datasets
	- CIFAR10, CIFAR100, NORB, STL10, inria pedestrian detection, inria human detection, dymlerchrysler human
		detection, face detection, PASCALVoc2011, CALTECH101...

	- support for unlabeled samples: dataset_t::has_target(index_t)

- how to generate samples ?!

- may revive/improve the bootstrapping idea:
        - also bootstrap the background of the images containing faces
                => many billions of samples (may require removing some profile faces or some animals 
                        that look very much like frontal faces)

