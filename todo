- avg_l2_group_criterion:
	- cannot be tuned (faster to train!)
	- penalize with a power function (order 2,3,4) the L2-norm of each group
	- default: no group so use the L2-norm of all parameters

- create specific trainers for avg_l2_group_criterion:
	- group by layer (convolution models + MLPs)
	- group by convolutions (convolution models only)

- refactor criterion/accumulator:
	- store loss value & errors as ncv::stats objects
	- accomodate group L2-norms

- per layer/convolution regularization:
	- L2-norm of the layer parameters should be forced to be exactly/smaller than 1
		=> there should be no regularization term to tune

	- cannot tune the learning rate (may result in too many hyper-parameters to tune!)

- MAD with index shifts (may speed-up corr2d)

- test program to assess the speed of the 3D convolution/correlation operations

- faster convolution:
 	- build a toeplitz matrix, then the convolution becomes a matrix multiplication:
		- http://en.wikipedia.org/wiki/Toeplitz_matrix

        - check if any improvement if using a 3D convolution    

- GTSD dataset support (after 0.1 release):
	- create both classification and detection tasks
	- build an object detector

- finish the training scripts for other datasets (CIFAR-10, CIFAR-100, SVHN, NORB, STL)

- unsupervised learning (after 0.1 release): 
	- unsupervised training:
		- new loss (without the output layer): a single output should have a much larger value magnitude than the others 
			(e.g. learn to disintangle the variation modes)
		- than train the output layer with the annotated samples

- reconstruction regularization (after 0.1 release):
	- for linear & convolution layers -> reuse parameters to easily reconstruct the input

- feature visualization & image generation (after 0.1 release)

- thread_loop with states should use std::future to obtain the returned values (e.g. gradient & loss value)
	

